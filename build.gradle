plugins {
    id 'java'
    id 'org.springframework.boot' version "$springBootVersion" apply false
    id 'io.spring.dependency-management' version "$springDependencyManagement" apply false
    id 'jacoco'
}

group = 'com.demo.unit'
version = "$applicationVersion"

subprojects {
    apply plugin: 'jacoco'

    repositories {
        mavenCentral()
    }

    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
        implementation 'org.springframework.boot:spring-boot-starter-validation'
        // runtimeOnly 'mysql:mysql-connector-java:8.0.33'
        implementation 'com.mysql:mysql-connector-j'

        compileOnly "org.projectlombok:lombok:$lombomVersion"
        annotationProcessor "org.projectlombok:lombok:$lombomVersion"
        testCompileOnly "org.projectlombok:lombok:$lombomVersion"
        testAnnotationProcessor "org.projectlombok:lombok:$lombomVersion"

        testImplementation "org.springframework.boot:spring-boot-starter-test"
        testImplementation "org.testcontainers:testcontainers:$testContainerVersion"
        testImplementation "org.testcontainers:junit-jupiter:$testContainerVersion"
        testImplementation "org.testcontainers:mysql:$testContainerVersion"
        testRuntimeOnly 'com.h2database:h2' // testcontainer 로 대채
    }

    test.useJUnitPlatform()
}

allprojects {
    jacoco {
        toolVersion = "$jacocoVersion"
        // 기본 설정되어있음
        // reportsDirectory = layout.buildDirectory.dir("reports/jacoco/test")
    }
    // 자동으로 모든 task 의 test 시에 jacoco 설정
    test {
        finalizedBy jacocoTestReport // report is always generated after tests run
    }
    // jacoco test 결과를 report 형태로 발행
    jacocoTestReport {
        reports {
            html.required = true
            csv.required = false
            xml.required = false
            // html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
        }
    }

    // 커버리지 기준 만족여부 확인
    jacocoTestCoverageVerification {
        violationRules {
            rule {
                limit {
                    minimum = 0.3
                }
            }

            rule {
                enabled = true
                includes = ['com.demo.unit.domain.*']
                element = 'CLASS'           // 계측 묶음 단위
                                            // BUNDLE(default): 패키지 번들 (전체 프로젝트)
                                            // PACKAGE
                                            // SOURCEFILE
                                            // CLASS
                                            // METHOD
                limit {
                    counter = 'LINE'        // 계측 요소
                                            // INSTRUCTION(default): 바이트코드 명령 수
                                            // LINE: 코드의 라인 수, 빈줄 제외
                                            // BRANCH: 제어문 분기 수
                                            // CLASS
                                            // METHOD
                                            // COMPLEXITY: 복잡도, 수식은 문서 참고

                    value = 'COVEREDRATIO'  // 계측 방식
                                            // COVEREDRATIO (default): 커버된 비율.
                                            // MISSEDRATIO: 커버되지 않은 비율.
                                            // TOTALCOUNT: 전체 개수
                                            // MISSEDCOUNT: 커버되지 않은 개수
                                            // COVEREDCOUNT: 커버된 개수

                    minimum = 0.3
                }
            }
        }
    }
}